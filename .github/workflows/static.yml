# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Prepare static site for GitHub Pages
        run: |
          # Create a script to fix the static site for GitHub Pages
          cat > ./prepare-static-site.sh << 'EOF'
          #!/bin/bash
          
          # Prepare the static site for GitHub Pages deployment
          ROOT_DIR="."
          OUT_DIR="./out"
          
          # First, create root-level files for GitHub Pages
          echo "Creating root-level files"
          touch "$ROOT_DIR/.nojekyll"
          echo "backus.agency" > "$ROOT_DIR/CNAME"
          
          # Then create files inside the out directory
          echo "Creating .nojekyll file in output directory"
          touch "$OUT_DIR/.nojekyll"
          
          echo "Creating CNAME file in output directory"
          echo "backus.agency" > "$OUT_DIR/CNAME"
          
          # Create 404 page if it doesn't exist
          if [ ! -f "$OUT_DIR/404.html" ]; then
            echo "Creating 404 page"
            cp "$OUT_DIR/index.html" "$OUT_DIR/404.html"
          fi
          
          # Fix paths in HTML files - remove all references to /out/
          echo "Fixing paths in HTML files"
          find "$OUT_DIR" -name "*.html" -type f | grep -v -E "\.git/|_next/" | while read html_file; do
            # Replace any references to /out/ path with root path
            sed -i 's#/out/#/#g' "$html_file"
            sed -i 's#\"/out/#\"/#g' "$html_file"
            sed -i "s#'/out/#'/#g" "$html_file"
            
            # Insert the path-fixer.js script if not already included
            if ! grep -q "path-fixer.js" "$html_file"; then
              sed -i 's#</body>#<script src="/path-fixer.js"></script></body>#' "$html_file"
              echo "Added path-fixer.js to $html_file"
            fi
            
            # Insert the form-fixer.js script for HTML files with forms
            if grep -q "<form" "$html_file" && ! grep -q "form-fixer.js" "$html_file"; then
              sed -i 's#</head>#<script src="/form-fixer.js"></script></head>#' "$html_file"
              echo "Added form-fixer.js to $html_file"
            fi
          done
          
          # Create HTML redirects for directory paths
          echo "Creating directory redirects"
          find "$OUT_DIR" -type d | grep -v -E "\.git/|_next/" | while read dir; do
            # Skip the out directory itself
            if [ "$dir" == "$OUT_DIR" ]; then
              continue
            fi
            
            # Create an HTML file for paths without trailing slashes
            # For example, create /about.html that redirects to /about/index.html
            rel_path=${dir#$OUT_DIR}
            if [ "$rel_path" != "" ]; then
              html_file="$OUT_DIR${rel_path}.html"
              if [ ! -f "$html_file" ]; then
                mkdir -p "$(dirname "$html_file")"
                echo "<!DOCTYPE html>" > "$html_file"
                echo "<html>" >> "$html_file"
                echo "<head>" >> "$html_file"
                echo "  <meta charset=\"utf-8\">" >> "$html_file"
                echo "  <title>${rel_path#/}</title>" >> "$html_file"
                echo "  <meta http-equiv=\"refresh\" content=\"0; url=${rel_path}/index.html\">" >> "$html_file"
                echo "</head>" >> "$html_file"
                echo "<body>" >> "$html_file"
                echo "  Redirecting to <a href=\"${rel_path}/index.html\">${rel_path}/index.html</a>" >> "$html_file"
                echo "</body>" >> "$html_file"
                echo "</html>" >> "$html_file"
                echo "Created redirect: $html_file -> ${rel_path}/index.html"
              fi
            fi
          done
          
          # Double-check for any remaining /out/ references
          echo "Double-checking for any remaining /out/ references"
          grep -r "/out/" "$OUT_DIR" --include="*.html" --include="*.js" --include="*.css" || echo "No /out/ references found"
          
          echo "Static site preparation complete"
          EOF
          
          # Make the script executable and run it
          chmod +x ./prepare-static-site.sh
          ./prepare-static-site.sh
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the out directory
          path: './out'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
